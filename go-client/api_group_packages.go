/*
 * GitLab API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v4
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type GroupPackagesApiService service

/*
GroupPackagesApiService List packages within a group
Get a list of project packages at the group level. This feature was introduced in GitLab 12.5
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id ID or URL-encoded path of the group
 * @param optional nil or *GroupPackagesApiGetApiV4GroupsIdPackagesOpts - Optional Parameters:
     * @param "ExcludeSubgroups" (optional.Bool) -  Determines if subgroups should be excluded
     * @param "Page" (optional.Int32) -  Current page number
     * @param "PerPage" (optional.Int32) -  Number of items per page
     * @param "OrderBy" (optional.String) -  Return packages ordered by &#x60;created_at&#x60;, &#x60;name&#x60;, &#x60;version&#x60; or &#x60;type&#x60; fields.
     * @param "Sort" (optional.String) -  Return packages sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order.
     * @param "PackageType" (optional.String) -  Return packages of a certain type
     * @param "PackageName" (optional.String) -  Return packages with this name
     * @param "PackageVersion" (optional.String) -  Return packages with this version
     * @param "IncludeVersionless" (optional.Bool) -  Returns packages without a version
     * @param "Status" (optional.String) -  Return packages with specified status

@return []ApiEntitiesPackage
*/

type GroupPackagesApiGetApiV4GroupsIdPackagesOpts struct {
	ExcludeSubgroups   optional.Bool
	Page               optional.Int32
	PerPage            optional.Int32
	OrderBy            optional.String
	Sort               optional.String
	PackageType        optional.String
	PackageName        optional.String
	PackageVersion     optional.String
	IncludeVersionless optional.Bool
	Status             optional.String
}

func (a *GroupPackagesApiService) GetApiV4GroupsIdPackages(ctx context.Context, id string, localVarOptionals *GroupPackagesApiGetApiV4GroupsIdPackagesOpts) ([]ApiEntitiesPackage, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue []ApiEntitiesPackage
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/groups/{id}/packages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ExcludeSubgroups.IsSet() {
		localVarQueryParams.Add("exclude_subgroups", parameterToString(localVarOptionals.ExcludeSubgroups.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PerPage.IsSet() {
		localVarQueryParams.Add("per_page", parameterToString(localVarOptionals.PerPage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OrderBy.IsSet() {
		localVarQueryParams.Add("order_by", parameterToString(localVarOptionals.OrderBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PackageType.IsSet() {
		localVarQueryParams.Add("package_type", parameterToString(localVarOptionals.PackageType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PackageName.IsSet() {
		localVarQueryParams.Add("package_name", parameterToString(localVarOptionals.PackageName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PackageVersion.IsSet() {
		localVarQueryParams.Add("package_version", parameterToString(localVarOptionals.PackageVersion.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeVersionless.IsSet() {
		localVarQueryParams.Add("include_versionless", parameterToString(localVarOptionals.IncludeVersionless.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v []ApiEntitiesPackage
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
