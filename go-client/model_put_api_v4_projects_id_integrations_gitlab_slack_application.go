/*
 * GitLab API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v4
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package client

// Create/Edit Gitlab Slack Application integration
type PutApiV4ProjectsIdIntegrationsGitlabSlackApplication struct {
	// Default channel to use if no other channel is configured.
	Channel string `json:"channel,omitempty"`
	// Send notifications for broken pipelines.
	NotifyOnlyBrokenPipelines bool `json:"notify_only_broken_pipelines,omitempty"`
	// Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.
	BranchesToBeNotified string `json:"branches_to_be_notified,omitempty"`
	// Labels to send notifications for. Leave blank to receive notifications for all events.
	LabelsToBeNotified string `json:"labels_to_be_notified,omitempty"`
	// Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.
	LabelsToBeNotifiedBehavior string `json:"labels_to_be_notified_behavior,omitempty"`
	// The name of the channel to receive push_events notifications
	PushChannel string `json:"push_channel,omitempty"`
	// The name of the channel to receive issues_events notifications
	IssueChannel string `json:"issue_channel,omitempty"`
	// The name of the channel to receive incident_events notifications
	IncidentChannel string `json:"incident_channel,omitempty"`
	// The name of the channel to receive alert_events notifications
	AlertChannel string `json:"alert_channel,omitempty"`
	// The name of the channel to receive confidential_issues_events notifications
	ConfidentialIssueChannel string `json:"confidential_issue_channel,omitempty"`
	// The name of the channel to receive merge_requests_events notifications
	MergeRequestChannel string `json:"merge_request_channel,omitempty"`
	// The name of the channel to receive note_events notifications
	NoteChannel string `json:"note_channel,omitempty"`
	// The name of the channel to receive confidential_note_events notifications
	ConfidentialNoteChannel string `json:"confidential_note_channel,omitempty"`
	// The name of the channel to receive tag_push_events notifications
	TagPushChannel string `json:"tag_push_channel,omitempty"`
	// The name of the channel to receive deployment_events notifications
	DeploymentChannel string `json:"deployment_channel,omitempty"`
	// The name of the channel to receive pipeline_events notifications
	PipelineChannel string `json:"pipeline_channel,omitempty"`
	// The name of the channel to receive wiki_page_events notifications
	WikiPageChannel string `json:"wiki_page_channel,omitempty"`
	// The name of the channel to receive vulnerability_events notifications
	VulnerabilityChannel string `json:"vulnerability_channel,omitempty"`
	// Trigger event for pushes to the repository.
	PushEvents bool `json:"push_events,omitempty"`
	// Trigger event when an issue is created, updated, or closed.
	IssuesEvents bool `json:"issues_events,omitempty"`
	// Trigger event when a confidential issue is created, updated, or closed.
	ConfidentialIssuesEvents bool `json:"confidential_issues_events,omitempty"`
	// Trigger event when a merge request is created, updated, or merged.
	MergeRequestsEvents bool `json:"merge_requests_events,omitempty"`
	// Trigger event for new comments.
	NoteEvents bool `json:"note_events,omitempty"`
	// Trigger event for new comments on confidential issues.
	ConfidentialNoteEvents bool `json:"confidential_note_events,omitempty"`
	// Trigger event for new tags pushed to the repository.
	TagPushEvents bool `json:"tag_push_events,omitempty"`
	// Trigger event when a pipeline status changes.
	PipelineEvents bool `json:"pipeline_events,omitempty"`
	// Trigger event when a wiki page is created or updated.
	WikiPageEvents bool `json:"wiki_page_events,omitempty"`
	// Trigger event when a deployment starts or finishes.
	DeploymentEvents bool `json:"deployment_events,omitempty"`
	// Trigger event when an incident is created.
	IncidentEvents      bool `json:"incident_events,omitempty"`
	VulnerabilityEvents bool `json:"vulnerability_events,omitempty"`
	// Trigger event when a new, unique alert is recorded.
	AlertEvents bool `json:"alert_events,omitempty"`
}
