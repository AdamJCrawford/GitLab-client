/*
 * GitLab API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v4
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type ProjectImportApiService service

/*
ProjectImportApiService Get a project import status
This feature was introduced in GitLab 10.6.
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param id The ID or URL-encoded path of the project

@return ApiEntitiesProjectImportStatus
*/
func (a *ProjectImportApiService) GetApiV4ProjectsIdImport(ctx context.Context, id string) (ApiEntitiesProjectImportStatus, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ApiEntitiesProjectImportStatus
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/{id}/import"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ApiEntitiesProjectImportStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ProjectImportApiService Get the statuses of relation imports for specified project
This feature was introduced in GitLab 16.11.
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param id The ID or URL-encoded path of the project

@return ApiEntitiesProjectImportStatus
*/
func (a *ProjectImportApiService) GetApiV4ProjectsIdRelationImports(ctx context.Context, id string) (ApiEntitiesProjectImportStatus, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ApiEntitiesProjectImportStatus
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/{id}/relation-imports"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ApiEntitiesProjectImportStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ProjectImportApiService Create a new project import
This feature was introduced in GitLab 10.6.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param path The new project path and name
 * @param file The project export file to be imported
 * @param optional nil or *ProjectImportApiPostApiV4ProjectsImportOpts - Optional Parameters:
     * @param "Name" (optional.String) -  The name of the project to be imported. Defaults to the path of the project if not provided.
     * @param "Namespace" (optional.String) -  The ID or name of the namespace that the project will be imported into. Defaults to the current user&#39;s namespace.
     * @param "Overwrite" (optional.Bool) -  If there is a project in the same namespace and with the same name overwrite it
     * @param "OverrideParamsDescription" (optional.String) -  The description of the project
     * @param "OverrideParamsBuildGitStrategy" (optional.String) -  The Git strategy. Defaults to &#x60;fetch&#x60;
     * @param "OverrideParamsBuildTimeout" (optional.Int32) -  Build timeout
     * @param "OverrideParamsAutoCancelPendingPipelines" (optional.String) -  Auto-cancel pending pipelines
     * @param "OverrideParamsCiConfigPath" (optional.String) -  The path to CI config file. Defaults to &#x60;.gitlab-ci.yml&#x60;
     * @param "OverrideParamsServiceDeskEnabled" (optional.Bool) -  Disable or enable the service desk
     * @param "OverrideParamsIssuesEnabled" (optional.Bool) -  Flag indication if the issue tracker is enabled
     * @param "OverrideParamsMergeRequestsEnabled" (optional.Bool) -  Flag indication if merge requests are enabled
     * @param "OverrideParamsWikiEnabled" (optional.Bool) -  Flag indication if the wiki is enabled
     * @param "OverrideParamsJobsEnabled" (optional.Bool) -  Flag indication if jobs are enabled
     * @param "OverrideParamsSnippetsEnabled" (optional.Bool) -  Flag indication if snippets are enabled
     * @param "OverrideParamsIssuesAccessLevel" (optional.String) -  Issues access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsRepositoryAccessLevel" (optional.String) -  Repository access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsMergeRequestsAccessLevel" (optional.String) -  Merge requests access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsForkingAccessLevel" (optional.String) -  Forks access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsWikiAccessLevel" (optional.String) -  Wiki access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsBuildsAccessLevel" (optional.String) -  Builds access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsSnippetsAccessLevel" (optional.String) -  Snippets access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsPagesAccessLevel" (optional.String) -  Pages access level. One of &#x60;disabled&#x60;, &#x60;private&#x60;, &#x60;enabled&#x60; or &#x60;public&#x60;
     * @param "OverrideParamsAnalyticsAccessLevel" (optional.String) -  Analytics access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsContainerRegistryAccessLevel" (optional.String) -  Controls visibility of the container registry. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;. &#x60;private&#x60; will make the container registry accessible only to project members (reporter role and above). &#x60;enabled&#x60; will make the container registry accessible to everyone who has access to the project. &#x60;disabled&#x60; will disable the container registry
     * @param "OverrideParamsSecurityAndComplianceAccessLevel" (optional.String) -  Security and compliance access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsReleasesAccessLevel" (optional.String) -  Releases access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsEnvironmentsAccessLevel" (optional.String) -  Environments access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsFeatureFlagsAccessLevel" (optional.String) -  Feature flags access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsInfrastructureAccessLevel" (optional.String) -  Infrastructure access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsMonitorAccessLevel" (optional.String) -  Monitor access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsModelExperimentsAccessLevel" (optional.String) -  Model experiments access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsModelRegistryAccessLevel" (optional.String) -  Model registry access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsEmailsDisabled" (optional.Bool) -  Deprecated: Use emails_enabled instead.
     * @param "OverrideParamsEmailsEnabled" (optional.Bool) -  Enable email notifications
     * @param "OverrideParamsShowDefaultAwardEmojis" (optional.Bool) -  Show default award emojis
     * @param "OverrideParamsShowDiffPreviewInEmail" (optional.Bool) -  Include the code diff preview in merge request notification emails
     * @param "OverrideParamsWarnAboutPotentiallyUnwantedCharacters" (optional.Bool) -  Warn about potentially unwanted characters
     * @param "OverrideParamsEnforceAuthChecksOnUploads" (optional.Bool) -  Enforce auth check on uploads
     * @param "OverrideParamsSharedRunnersEnabled" (optional.Bool) -  Flag indication if shared runners are enabled for that project
     * @param "OverrideParamsGroupRunnersEnabled" (optional.Bool) -  Flag indication if group runners are enabled for that project
     * @param "OverrideParamsResolveOutdatedDiffDiscussions" (optional.Bool) -  Automatically resolve merge request diff threads on lines changed with a push
     * @param "OverrideParamsRemoveSourceBranchAfterMerge" (optional.Bool) -  Remove the source branch by default after merge
     * @param "OverrideParamsContainerRegistryEnabled" (optional.Bool) -  Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project
     * @param "OverrideParamsContainerExpirationPolicyAttributesCadence" (optional.String) -  Container expiration policy cadence for recurring job
     * @param "OverrideParamsContainerExpirationPolicyAttributesKeepN" (optional.Int32) -  Container expiration policy number of images to keep
     * @param "OverrideParamsContainerExpirationPolicyAttributesOlderThan" (optional.String) -  Container expiration policy remove images older than value
     * @param "OverrideParamsContainerExpirationPolicyAttributesNameRegex" (optional.String) -  Container expiration policy regex for image removal
     * @param "OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep" (optional.String) -  Container expiration policy regex for image retention
     * @param "OverrideParamsContainerExpirationPolicyAttributesEnabled" (optional.Bool) -  Flag indication if container expiration policy is enabled
     * @param "OverrideParamsLfsEnabled" (optional.Bool) -  Flag indication if Git LFS is enabled for that project
     * @param "OverrideParamsVisibility" (optional.String) -  The visibility of the project.
     * @param "OverrideParamsPublicBuilds" (optional.Bool) -  Deprecated: Use public_jobs instead.
     * @param "OverrideParamsPublicJobs" (optional.Bool) -  Perform public builds
     * @param "OverrideParamsRequestAccessEnabled" (optional.Bool) -  Allow users to request member access
     * @param "OverrideParamsOnlyAllowMergeIfPipelineSucceeds" (optional.Bool) -  Only allow to merge if builds succeed
     * @param "OverrideParamsAllowMergeOnSkippedPipeline" (optional.Bool) -  Allow to merge if pipeline is skipped
     * @param "OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved" (optional.Bool) -  Only allow to merge if all threads are resolved
     * @param "OverrideParamsTagList" (optional.Interface of []string) -  Deprecated: Use :topics instead
     * @param "OverrideParamsTopics" (optional.Interface of []string) -  The list of topics for a project
     * @param "OverrideParamsAvatar" (optional.Interface of *os.File) -  Avatar image for project
     * @param "OverrideParamsPrintingMergeRequestLinkEnabled" (optional.Bool) -  Show link to create/view merge request when pushing from the command line
     * @param "OverrideParamsMergeMethod" (optional.String) -  The merge method used when merging merge requests
     * @param "OverrideParamsSuggestionCommitMessage" (optional.String) -  The commit message used to apply merge request suggestions
     * @param "OverrideParamsMergeCommitTemplate" (optional.String) -  Template used to create merge commit message
     * @param "OverrideParamsSquashCommitTemplate" (optional.String) -  Template used to create squash commit message
     * @param "OverrideParamsIssueBranchTemplate" (optional.String) -  Template used to create a branch from an issue
     * @param "OverrideParamsInitializeWithReadme" (optional.Bool) -  Initialize a project with a README.md
     * @param "OverrideParamsAutoDevopsEnabled" (optional.Bool) -  Flag indication if Auto DevOps is enabled
     * @param "OverrideParamsAutoDevopsDeployStrategy" (optional.String) -  Auto Deploy strategy
     * @param "OverrideParamsAutocloseReferencedIssues" (optional.Bool) -  Flag indication if referenced issues auto-closing is enabled
     * @param "OverrideParamsRepositoryStorage" (optional.String) -  Which storage shard the repository is on. Available only to admins
     * @param "OverrideParamsPackagesEnabled" (optional.Bool) -  Enable project packages feature
     * @param "OverrideParamsSquashOption" (optional.String) -  Squash default for project. One of &#x60;never&#x60;, &#x60;always&#x60;, &#x60;default_on&#x60;, or &#x60;default_off&#x60;.
     * @param "OverrideParamsMrDefaultTargetSelf" (optional.Bool) -  Merge requests of this forked project targets itself by default
     * @param "OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed" (optional.Bool) -  Blocks merge requests from merging unless all status checks have passed
     * @param "OverrideParamsApprovalsBeforeMerge" (optional.Int32) -  How many approvers should approve merge request by default
     * @param "OverrideParamsMirror" (optional.Bool) -  Enables pull mirroring in a project
     * @param "OverrideParamsMirrorTriggerBuilds" (optional.Bool) -  Pull mirroring triggers builds
     * @param "OverrideParamsExternalAuthorizationClassificationLabel" (optional.String) -  The classification label for the project
     * @param "OverrideParamsRequirementsAccessLevel" (optional.String) -  Requirements feature access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsPreventMergeWithoutJiraIssue" (optional.Bool) -  Require an associated issue from Jira
     * @param "FilePath" (optional.String) -  Path to locally stored body (generated by Workhorse)
     * @param "FileName" (optional.String) -  Real filename as send in Content-Disposition (generated by Workhorse)
     * @param "FileType" (optional.String) -  Real content type as send in Content-Type (generated by Workhorse)
     * @param "FileSize" (optional.Int32) -  Real size of file (generated by Workhorse)
     * @param "FileMd5" (optional.String) -  MD5 checksum of the file (generated by Workhorse)
     * @param "FileSha1" (optional.String) -  SHA1 checksum of the file (generated by Workhorse)
     * @param "FileSha256" (optional.String) -  SHA256 checksum of the file (generated by Workhorse)
     * @param "FileEtag" (optional.String) -  Etag of the file (generated by Workhorse)
     * @param "FileRemoteId" (optional.String) -  Remote_id of the file (generated by Workhorse)
     * @param "FileRemoteUrl" (optional.String) -  Remote_url of the file (generated by Workhorse)

@return ApiEntitiesProjectImportStatus
*/

type ProjectImportApiPostApiV4ProjectsImportOpts struct {
	Name                                                           optional.String
	Namespace                                                      optional.String
	Overwrite                                                      optional.Bool
	OverrideParamsDescription                                      optional.String
	OverrideParamsBuildGitStrategy                                 optional.String
	OverrideParamsBuildTimeout                                     optional.Int32
	OverrideParamsAutoCancelPendingPipelines                       optional.String
	OverrideParamsCiConfigPath                                     optional.String
	OverrideParamsServiceDeskEnabled                               optional.Bool
	OverrideParamsIssuesEnabled                                    optional.Bool
	OverrideParamsMergeRequestsEnabled                             optional.Bool
	OverrideParamsWikiEnabled                                      optional.Bool
	OverrideParamsJobsEnabled                                      optional.Bool
	OverrideParamsSnippetsEnabled                                  optional.Bool
	OverrideParamsIssuesAccessLevel                                optional.String
	OverrideParamsRepositoryAccessLevel                            optional.String
	OverrideParamsMergeRequestsAccessLevel                         optional.String
	OverrideParamsForkingAccessLevel                               optional.String
	OverrideParamsWikiAccessLevel                                  optional.String
	OverrideParamsBuildsAccessLevel                                optional.String
	OverrideParamsSnippetsAccessLevel                              optional.String
	OverrideParamsPagesAccessLevel                                 optional.String
	OverrideParamsAnalyticsAccessLevel                             optional.String
	OverrideParamsContainerRegistryAccessLevel                     optional.String
	OverrideParamsSecurityAndComplianceAccessLevel                 optional.String
	OverrideParamsReleasesAccessLevel                              optional.String
	OverrideParamsEnvironmentsAccessLevel                          optional.String
	OverrideParamsFeatureFlagsAccessLevel                          optional.String
	OverrideParamsInfrastructureAccessLevel                        optional.String
	OverrideParamsMonitorAccessLevel                               optional.String
	OverrideParamsModelExperimentsAccessLevel                      optional.String
	OverrideParamsModelRegistryAccessLevel                         optional.String
	OverrideParamsEmailsDisabled                                   optional.Bool
	OverrideParamsEmailsEnabled                                    optional.Bool
	OverrideParamsShowDefaultAwardEmojis                           optional.Bool
	OverrideParamsShowDiffPreviewInEmail                           optional.Bool
	OverrideParamsWarnAboutPotentiallyUnwantedCharacters           optional.Bool
	OverrideParamsEnforceAuthChecksOnUploads                       optional.Bool
	OverrideParamsSharedRunnersEnabled                             optional.Bool
	OverrideParamsGroupRunnersEnabled                              optional.Bool
	OverrideParamsResolveOutdatedDiffDiscussions                   optional.Bool
	OverrideParamsRemoveSourceBranchAfterMerge                     optional.Bool
	OverrideParamsContainerRegistryEnabled                         optional.Bool
	OverrideParamsContainerExpirationPolicyAttributesCadence       optional.String
	OverrideParamsContainerExpirationPolicyAttributesKeepN         optional.Int32
	OverrideParamsContainerExpirationPolicyAttributesOlderThan     optional.String
	OverrideParamsContainerExpirationPolicyAttributesNameRegex     optional.String
	OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep optional.String
	OverrideParamsContainerExpirationPolicyAttributesEnabled       optional.Bool
	OverrideParamsLfsEnabled                                       optional.Bool
	OverrideParamsVisibility                                       optional.String
	OverrideParamsPublicBuilds                                     optional.Bool
	OverrideParamsPublicJobs                                       optional.Bool
	OverrideParamsRequestAccessEnabled                             optional.Bool
	OverrideParamsOnlyAllowMergeIfPipelineSucceeds                 optional.Bool
	OverrideParamsAllowMergeOnSkippedPipeline                      optional.Bool
	OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved        optional.Bool
	OverrideParamsTagList                                          optional.Interface
	OverrideParamsTopics                                           optional.Interface
	OverrideParamsAvatar                                           optional.Interface
	OverrideParamsPrintingMergeRequestLinkEnabled                  optional.Bool
	OverrideParamsMergeMethod                                      optional.String
	OverrideParamsSuggestionCommitMessage                          optional.String
	OverrideParamsMergeCommitTemplate                              optional.String
	OverrideParamsSquashCommitTemplate                             optional.String
	OverrideParamsIssueBranchTemplate                              optional.String
	OverrideParamsInitializeWithReadme                             optional.Bool
	OverrideParamsAutoDevopsEnabled                                optional.Bool
	OverrideParamsAutoDevopsDeployStrategy                         optional.String
	OverrideParamsAutocloseReferencedIssues                        optional.Bool
	OverrideParamsRepositoryStorage                                optional.String
	OverrideParamsPackagesEnabled                                  optional.Bool
	OverrideParamsSquashOption                                     optional.String
	OverrideParamsMrDefaultTargetSelf                              optional.Bool
	OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed            optional.Bool
	OverrideParamsApprovalsBeforeMerge                             optional.Int32
	OverrideParamsMirror                                           optional.Bool
	OverrideParamsMirrorTriggerBuilds                              optional.Bool
	OverrideParamsExternalAuthorizationClassificationLabel         optional.String
	OverrideParamsRequirementsAccessLevel                          optional.String
	OverrideParamsPreventMergeWithoutJiraIssue                     optional.Bool
	FilePath                                                       optional.String
	FileName                                                       optional.String
	FileType                                                       optional.String
	FileSize                                                       optional.Int32
	FileMd5                                                        optional.String
	FileSha1                                                       optional.String
	FileSha256                                                     optional.String
	FileEtag                                                       optional.String
	FileRemoteId                                                   optional.String
	FileRemoteUrl                                                  optional.String
}

func (a *ProjectImportApiService) PostApiV4ProjectsImport(ctx context.Context, path string, file *os.File, localVarOptionals *ProjectImportApiPostApiV4ProjectsImportOpts) (ApiEntitiesProjectImportStatus, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ApiEntitiesProjectImportStatus
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("path", parameterToString(path, ""))
	localVarFile := file
	if localVarFile != nil {
		fbs, _ := io.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarFormParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Overwrite.IsSet() {
		localVarFormParams.Add("overwrite", parameterToString(localVarOptionals.Overwrite.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsDescription.IsSet() {
		localVarFormParams.Add("override_params[description]", parameterToString(localVarOptionals.OverrideParamsDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildGitStrategy.IsSet() {
		localVarFormParams.Add("override_params[build_git_strategy]", parameterToString(localVarOptionals.OverrideParamsBuildGitStrategy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildTimeout.IsSet() {
		localVarFormParams.Add("override_params[build_timeout]", parameterToString(localVarOptionals.OverrideParamsBuildTimeout.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoCancelPendingPipelines.IsSet() {
		localVarFormParams.Add("override_params[auto_cancel_pending_pipelines]", parameterToString(localVarOptionals.OverrideParamsAutoCancelPendingPipelines.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsCiConfigPath.IsSet() {
		localVarFormParams.Add("override_params[ci_config_path]", parameterToString(localVarOptionals.OverrideParamsCiConfigPath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsServiceDeskEnabled.IsSet() {
		localVarFormParams.Add("override_params[service_desk_enabled]", parameterToString(localVarOptionals.OverrideParamsServiceDeskEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssuesEnabled.IsSet() {
		localVarFormParams.Add("override_params[issues_enabled]", parameterToString(localVarOptionals.OverrideParamsIssuesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeRequestsEnabled.IsSet() {
		localVarFormParams.Add("override_params[merge_requests_enabled]", parameterToString(localVarOptionals.OverrideParamsMergeRequestsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWikiEnabled.IsSet() {
		localVarFormParams.Add("override_params[wiki_enabled]", parameterToString(localVarOptionals.OverrideParamsWikiEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsJobsEnabled.IsSet() {
		localVarFormParams.Add("override_params[jobs_enabled]", parameterToString(localVarOptionals.OverrideParamsJobsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSnippetsEnabled.IsSet() {
		localVarFormParams.Add("override_params[snippets_enabled]", parameterToString(localVarOptionals.OverrideParamsSnippetsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssuesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[issues_access_level]", parameterToString(localVarOptionals.OverrideParamsIssuesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRepositoryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[repository_access_level]", parameterToString(localVarOptionals.OverrideParamsRepositoryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeRequestsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[merge_requests_access_level]", parameterToString(localVarOptionals.OverrideParamsMergeRequestsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsForkingAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[forking_access_level]", parameterToString(localVarOptionals.OverrideParamsForkingAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWikiAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[wiki_access_level]", parameterToString(localVarOptionals.OverrideParamsWikiAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[builds_access_level]", parameterToString(localVarOptionals.OverrideParamsBuildsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSnippetsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[snippets_access_level]", parameterToString(localVarOptionals.OverrideParamsSnippetsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPagesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[pages_access_level]", parameterToString(localVarOptionals.OverrideParamsPagesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAnalyticsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[analytics_access_level]", parameterToString(localVarOptionals.OverrideParamsAnalyticsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerRegistryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[container_registry_access_level]", parameterToString(localVarOptionals.OverrideParamsContainerRegistryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSecurityAndComplianceAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[security_and_compliance_access_level]", parameterToString(localVarOptionals.OverrideParamsSecurityAndComplianceAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsReleasesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[releases_access_level]", parameterToString(localVarOptionals.OverrideParamsReleasesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEnvironmentsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[environments_access_level]", parameterToString(localVarOptionals.OverrideParamsEnvironmentsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsFeatureFlagsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[feature_flags_access_level]", parameterToString(localVarOptionals.OverrideParamsFeatureFlagsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsInfrastructureAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[infrastructure_access_level]", parameterToString(localVarOptionals.OverrideParamsInfrastructureAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMonitorAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[monitor_access_level]", parameterToString(localVarOptionals.OverrideParamsMonitorAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsModelExperimentsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[model_experiments_access_level]", parameterToString(localVarOptionals.OverrideParamsModelExperimentsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsModelRegistryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[model_registry_access_level]", parameterToString(localVarOptionals.OverrideParamsModelRegistryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEmailsDisabled.IsSet() {
		localVarFormParams.Add("override_params[emails_disabled]", parameterToString(localVarOptionals.OverrideParamsEmailsDisabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEmailsEnabled.IsSet() {
		localVarFormParams.Add("override_params[emails_enabled]", parameterToString(localVarOptionals.OverrideParamsEmailsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsShowDefaultAwardEmojis.IsSet() {
		localVarFormParams.Add("override_params[show_default_award_emojis]", parameterToString(localVarOptionals.OverrideParamsShowDefaultAwardEmojis.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsShowDiffPreviewInEmail.IsSet() {
		localVarFormParams.Add("override_params[show_diff_preview_in_email]", parameterToString(localVarOptionals.OverrideParamsShowDiffPreviewInEmail.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWarnAboutPotentiallyUnwantedCharacters.IsSet() {
		localVarFormParams.Add("override_params[warn_about_potentially_unwanted_characters]", parameterToString(localVarOptionals.OverrideParamsWarnAboutPotentiallyUnwantedCharacters.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEnforceAuthChecksOnUploads.IsSet() {
		localVarFormParams.Add("override_params[enforce_auth_checks_on_uploads]", parameterToString(localVarOptionals.OverrideParamsEnforceAuthChecksOnUploads.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSharedRunnersEnabled.IsSet() {
		localVarFormParams.Add("override_params[shared_runners_enabled]", parameterToString(localVarOptionals.OverrideParamsSharedRunnersEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsGroupRunnersEnabled.IsSet() {
		localVarFormParams.Add("override_params[group_runners_enabled]", parameterToString(localVarOptionals.OverrideParamsGroupRunnersEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsResolveOutdatedDiffDiscussions.IsSet() {
		localVarFormParams.Add("override_params[resolve_outdated_diff_discussions]", parameterToString(localVarOptionals.OverrideParamsResolveOutdatedDiffDiscussions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRemoveSourceBranchAfterMerge.IsSet() {
		localVarFormParams.Add("override_params[remove_source_branch_after_merge]", parameterToString(localVarOptionals.OverrideParamsRemoveSourceBranchAfterMerge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerRegistryEnabled.IsSet() {
		localVarFormParams.Add("override_params[container_registry_enabled]", parameterToString(localVarOptionals.OverrideParamsContainerRegistryEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesCadence.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][cadence]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesCadence.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesKeepN.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][keep_n]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesKeepN.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesOlderThan.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][older_than]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesOlderThan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegex.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][name_regex]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][name_regex_keep]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesEnabled.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][enabled]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsLfsEnabled.IsSet() {
		localVarFormParams.Add("override_params[lfs_enabled]", parameterToString(localVarOptionals.OverrideParamsLfsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsVisibility.IsSet() {
		localVarFormParams.Add("override_params[visibility]", parameterToString(localVarOptionals.OverrideParamsVisibility.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPublicBuilds.IsSet() {
		localVarFormParams.Add("override_params[public_builds]", parameterToString(localVarOptionals.OverrideParamsPublicBuilds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPublicJobs.IsSet() {
		localVarFormParams.Add("override_params[public_jobs]", parameterToString(localVarOptionals.OverrideParamsPublicJobs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRequestAccessEnabled.IsSet() {
		localVarFormParams.Add("override_params[request_access_enabled]", parameterToString(localVarOptionals.OverrideParamsRequestAccessEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfPipelineSucceeds.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_pipeline_succeeds]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfPipelineSucceeds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAllowMergeOnSkippedPipeline.IsSet() {
		localVarFormParams.Add("override_params[allow_merge_on_skipped_pipeline]", parameterToString(localVarOptionals.OverrideParamsAllowMergeOnSkippedPipeline.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_all_discussions_are_resolved]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsTagList.IsSet() {
		localVarFormParams.Add("override_params[tag_list]", parameterToString(localVarOptionals.OverrideParamsTagList.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsTopics.IsSet() {
		localVarFormParams.Add("override_params[topics]", parameterToString(localVarOptionals.OverrideParamsTopics.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAvatar.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.OverrideParamsAvatar.Value().(*os.File)
		if !localVarFileOk {
			return localVarReturnValue, nil, reportError("overrideParamsAvatar should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := io.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPrintingMergeRequestLinkEnabled.IsSet() {
		localVarFormParams.Add("override_params[printing_merge_request_link_enabled]", parameterToString(localVarOptionals.OverrideParamsPrintingMergeRequestLinkEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeMethod.IsSet() {
		localVarFormParams.Add("override_params[merge_method]", parameterToString(localVarOptionals.OverrideParamsMergeMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSuggestionCommitMessage.IsSet() {
		localVarFormParams.Add("override_params[suggestion_commit_message]", parameterToString(localVarOptionals.OverrideParamsSuggestionCommitMessage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeCommitTemplate.IsSet() {
		localVarFormParams.Add("override_params[merge_commit_template]", parameterToString(localVarOptionals.OverrideParamsMergeCommitTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSquashCommitTemplate.IsSet() {
		localVarFormParams.Add("override_params[squash_commit_template]", parameterToString(localVarOptionals.OverrideParamsSquashCommitTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssueBranchTemplate.IsSet() {
		localVarFormParams.Add("override_params[issue_branch_template]", parameterToString(localVarOptionals.OverrideParamsIssueBranchTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsInitializeWithReadme.IsSet() {
		localVarFormParams.Add("override_params[initialize_with_readme]", parameterToString(localVarOptionals.OverrideParamsInitializeWithReadme.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoDevopsEnabled.IsSet() {
		localVarFormParams.Add("override_params[auto_devops_enabled]", parameterToString(localVarOptionals.OverrideParamsAutoDevopsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoDevopsDeployStrategy.IsSet() {
		localVarFormParams.Add("override_params[auto_devops_deploy_strategy]", parameterToString(localVarOptionals.OverrideParamsAutoDevopsDeployStrategy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutocloseReferencedIssues.IsSet() {
		localVarFormParams.Add("override_params[autoclose_referenced_issues]", parameterToString(localVarOptionals.OverrideParamsAutocloseReferencedIssues.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRepositoryStorage.IsSet() {
		localVarFormParams.Add("override_params[repository_storage]", parameterToString(localVarOptionals.OverrideParamsRepositoryStorage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPackagesEnabled.IsSet() {
		localVarFormParams.Add("override_params[packages_enabled]", parameterToString(localVarOptionals.OverrideParamsPackagesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSquashOption.IsSet() {
		localVarFormParams.Add("override_params[squash_option]", parameterToString(localVarOptionals.OverrideParamsSquashOption.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMrDefaultTargetSelf.IsSet() {
		localVarFormParams.Add("override_params[mr_default_target_self]", parameterToString(localVarOptionals.OverrideParamsMrDefaultTargetSelf.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_all_status_checks_passed]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsApprovalsBeforeMerge.IsSet() {
		localVarFormParams.Add("override_params[approvals_before_merge]", parameterToString(localVarOptionals.OverrideParamsApprovalsBeforeMerge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMirror.IsSet() {
		localVarFormParams.Add("override_params[mirror]", parameterToString(localVarOptionals.OverrideParamsMirror.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMirrorTriggerBuilds.IsSet() {
		localVarFormParams.Add("override_params[mirror_trigger_builds]", parameterToString(localVarOptionals.OverrideParamsMirrorTriggerBuilds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsExternalAuthorizationClassificationLabel.IsSet() {
		localVarFormParams.Add("override_params[external_authorization_classification_label]", parameterToString(localVarOptionals.OverrideParamsExternalAuthorizationClassificationLabel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRequirementsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[requirements_access_level]", parameterToString(localVarOptionals.OverrideParamsRequirementsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPreventMergeWithoutJiraIssue.IsSet() {
		localVarFormParams.Add("override_params[prevent_merge_without_jira_issue]", parameterToString(localVarOptionals.OverrideParamsPreventMergeWithoutJiraIssue.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilePath.IsSet() {
		localVarFormParams.Add("file.path", parameterToString(localVarOptionals.FilePath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileName.IsSet() {
		localVarFormParams.Add("file.name", parameterToString(localVarOptionals.FileName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileType.IsSet() {
		localVarFormParams.Add("file.type", parameterToString(localVarOptionals.FileType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileSize.IsSet() {
		localVarFormParams.Add("file.size", parameterToString(localVarOptionals.FileSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileMd5.IsSet() {
		localVarFormParams.Add("file.md5", parameterToString(localVarOptionals.FileMd5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileSha1.IsSet() {
		localVarFormParams.Add("file.sha1", parameterToString(localVarOptionals.FileSha1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileSha256.IsSet() {
		localVarFormParams.Add("file.sha256", parameterToString(localVarOptionals.FileSha256.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileEtag.IsSet() {
		localVarFormParams.Add("file.etag", parameterToString(localVarOptionals.FileEtag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileRemoteId.IsSet() {
		localVarFormParams.Add("file.remote_id", parameterToString(localVarOptionals.FileRemoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileRemoteUrl.IsSet() {
		localVarFormParams.Add("file.remote_url", parameterToString(localVarOptionals.FileRemoteUrl.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v ApiEntitiesProjectImportStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ProjectImportApiService Workhorse authorize the project import upload
This feature was introduced in GitLab 12.9
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/
func (a *ProjectImportApiService) PostApiV4ProjectsImportAuthorize(ctx context.Context) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/import/authorize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ProjectImportApiService Re-import a relation into a project
This feature was introduced in GitLab 16.11.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param path The project path and name
 * @param file The project export file from which to extract the relation.
 * @param relation The relation to import. Must be one of issues, merge_requests, ci_pipelines, or milestones.
 * @param optional nil or *ProjectImportApiPostApiV4ProjectsImportRelationOpts - Optional Parameters:
     * @param "FilePath" (optional.String) -  Path to locally stored body (generated by Workhorse)
     * @param "FileName" (optional.String) -  Real filename as sent in Content-Disposition (generated by Workhorse)
     * @param "FileType" (optional.String) -  Real content type as send in Content-Type (generated by Workhorse)
     * @param "FileSize" (optional.Int32) -  Real size of file (generated by Workhorse)
     * @param "FileMd5" (optional.String) -  MD5 checksum of the file (generated by Workhorse)
     * @param "FileSha1" (optional.String) -  SHA1 checksum of the file (generated by Workhorse)
     * @param "FileSha256" (optional.String) -  SHA256 checksum of the file (generated by Workhorse)
     * @param "FileEtag" (optional.String) -  Etag of the file (generated by Workhorse)
     * @param "FileRemoteId" (optional.String) -  Remote_id of the file (generated by Workhorse)
     * @param "FileRemoteUrl" (optional.String) -  Remote_url of the file (generated by Workhorse)

@return ApiEntitiesRelationImportTracker
*/

type ProjectImportApiPostApiV4ProjectsImportRelationOpts struct {
	FilePath      optional.String
	FileName      optional.String
	FileType      optional.String
	FileSize      optional.Int32
	FileMd5       optional.String
	FileSha1      optional.String
	FileSha256    optional.String
	FileEtag      optional.String
	FileRemoteId  optional.String
	FileRemoteUrl optional.String
}

func (a *ProjectImportApiService) PostApiV4ProjectsImportRelation(ctx context.Context, path string, file *os.File, relation string, localVarOptionals *ProjectImportApiPostApiV4ProjectsImportRelationOpts) (ApiEntitiesRelationImportTracker, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ApiEntitiesRelationImportTracker
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/import-relation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("path", parameterToString(path, ""))
	localVarFile := file
	if localVarFile != nil {
		fbs, _ := io.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	localVarFormParams.Add("relation", parameterToString(relation, ""))
	if localVarOptionals != nil && localVarOptionals.FilePath.IsSet() {
		localVarFormParams.Add("file.path", parameterToString(localVarOptionals.FilePath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileName.IsSet() {
		localVarFormParams.Add("file.name", parameterToString(localVarOptionals.FileName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileType.IsSet() {
		localVarFormParams.Add("file.type", parameterToString(localVarOptionals.FileType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileSize.IsSet() {
		localVarFormParams.Add("file.size", parameterToString(localVarOptionals.FileSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileMd5.IsSet() {
		localVarFormParams.Add("file.md5", parameterToString(localVarOptionals.FileMd5.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileSha1.IsSet() {
		localVarFormParams.Add("file.sha1", parameterToString(localVarOptionals.FileSha1.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileSha256.IsSet() {
		localVarFormParams.Add("file.sha256", parameterToString(localVarOptionals.FileSha256.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileEtag.IsSet() {
		localVarFormParams.Add("file.etag", parameterToString(localVarOptionals.FileEtag.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileRemoteId.IsSet() {
		localVarFormParams.Add("file.remote_id", parameterToString(localVarOptionals.FileRemoteId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FileRemoteUrl.IsSet() {
		localVarFormParams.Add("file.remote_url", parameterToString(localVarOptionals.FileRemoteUrl.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v ApiEntitiesRelationImportTracker
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ProjectImportApiService Workhorse authorize the project relation import upload
This feature was introduced in GitLab 16.11
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
*/
func (a *ProjectImportApiService) PostApiV4ProjectsImportRelationAuthorize(ctx context.Context) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/import-relation/authorize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		return localVarHttpResponse, newErr
	}

	return localVarHttpResponse, nil
}

/*
ProjectImportApiService Create a new project import using a remote object storage path
This feature was introduced in GitLab 13.2.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param url The URL for the file.
 * @param path The new project path and name
 * @param optional nil or *ProjectImportApiPostApiV4ProjectsRemoteImportOpts - Optional Parameters:
     * @param "Name" (optional.String) -  The name of the project to be imported. Defaults to the path of the project if not provided.
     * @param "Namespace" (optional.String) -  The ID or name of the namespace that the project will be imported into. Defaults to the current user&#39;s namespace.
     * @param "Overwrite" (optional.Bool) -  If there is a project in the same namespace and with the same name overwrite it
     * @param "OverrideParamsDescription" (optional.String) -  The description of the project
     * @param "OverrideParamsBuildGitStrategy" (optional.String) -  The Git strategy. Defaults to &#x60;fetch&#x60;
     * @param "OverrideParamsBuildTimeout" (optional.Int32) -  Build timeout
     * @param "OverrideParamsAutoCancelPendingPipelines" (optional.String) -  Auto-cancel pending pipelines
     * @param "OverrideParamsCiConfigPath" (optional.String) -  The path to CI config file. Defaults to &#x60;.gitlab-ci.yml&#x60;
     * @param "OverrideParamsServiceDeskEnabled" (optional.Bool) -  Disable or enable the service desk
     * @param "OverrideParamsIssuesEnabled" (optional.Bool) -  Flag indication if the issue tracker is enabled
     * @param "OverrideParamsMergeRequestsEnabled" (optional.Bool) -  Flag indication if merge requests are enabled
     * @param "OverrideParamsWikiEnabled" (optional.Bool) -  Flag indication if the wiki is enabled
     * @param "OverrideParamsJobsEnabled" (optional.Bool) -  Flag indication if jobs are enabled
     * @param "OverrideParamsSnippetsEnabled" (optional.Bool) -  Flag indication if snippets are enabled
     * @param "OverrideParamsIssuesAccessLevel" (optional.String) -  Issues access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsRepositoryAccessLevel" (optional.String) -  Repository access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsMergeRequestsAccessLevel" (optional.String) -  Merge requests access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsForkingAccessLevel" (optional.String) -  Forks access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsWikiAccessLevel" (optional.String) -  Wiki access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsBuildsAccessLevel" (optional.String) -  Builds access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsSnippetsAccessLevel" (optional.String) -  Snippets access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsPagesAccessLevel" (optional.String) -  Pages access level. One of &#x60;disabled&#x60;, &#x60;private&#x60;, &#x60;enabled&#x60; or &#x60;public&#x60;
     * @param "OverrideParamsAnalyticsAccessLevel" (optional.String) -  Analytics access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsContainerRegistryAccessLevel" (optional.String) -  Controls visibility of the container registry. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;. &#x60;private&#x60; will make the container registry accessible only to project members (reporter role and above). &#x60;enabled&#x60; will make the container registry accessible to everyone who has access to the project. &#x60;disabled&#x60; will disable the container registry
     * @param "OverrideParamsSecurityAndComplianceAccessLevel" (optional.String) -  Security and compliance access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsReleasesAccessLevel" (optional.String) -  Releases access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsEnvironmentsAccessLevel" (optional.String) -  Environments access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsFeatureFlagsAccessLevel" (optional.String) -  Feature flags access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsInfrastructureAccessLevel" (optional.String) -  Infrastructure access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsMonitorAccessLevel" (optional.String) -  Monitor access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsModelExperimentsAccessLevel" (optional.String) -  Model experiments access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsModelRegistryAccessLevel" (optional.String) -  Model registry access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsEmailsDisabled" (optional.Bool) -  Deprecated: Use emails_enabled instead.
     * @param "OverrideParamsEmailsEnabled" (optional.Bool) -  Enable email notifications
     * @param "OverrideParamsShowDefaultAwardEmojis" (optional.Bool) -  Show default award emojis
     * @param "OverrideParamsShowDiffPreviewInEmail" (optional.Bool) -  Include the code diff preview in merge request notification emails
     * @param "OverrideParamsWarnAboutPotentiallyUnwantedCharacters" (optional.Bool) -  Warn about potentially unwanted characters
     * @param "OverrideParamsEnforceAuthChecksOnUploads" (optional.Bool) -  Enforce auth check on uploads
     * @param "OverrideParamsSharedRunnersEnabled" (optional.Bool) -  Flag indication if shared runners are enabled for that project
     * @param "OverrideParamsGroupRunnersEnabled" (optional.Bool) -  Flag indication if group runners are enabled for that project
     * @param "OverrideParamsResolveOutdatedDiffDiscussions" (optional.Bool) -  Automatically resolve merge request diff threads on lines changed with a push
     * @param "OverrideParamsRemoveSourceBranchAfterMerge" (optional.Bool) -  Remove the source branch by default after merge
     * @param "OverrideParamsContainerRegistryEnabled" (optional.Bool) -  Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project
     * @param "OverrideParamsContainerExpirationPolicyAttributesCadence" (optional.String) -  Container expiration policy cadence for recurring job
     * @param "OverrideParamsContainerExpirationPolicyAttributesKeepN" (optional.Int32) -  Container expiration policy number of images to keep
     * @param "OverrideParamsContainerExpirationPolicyAttributesOlderThan" (optional.String) -  Container expiration policy remove images older than value
     * @param "OverrideParamsContainerExpirationPolicyAttributesNameRegex" (optional.String) -  Container expiration policy regex for image removal
     * @param "OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep" (optional.String) -  Container expiration policy regex for image retention
     * @param "OverrideParamsContainerExpirationPolicyAttributesEnabled" (optional.Bool) -  Flag indication if container expiration policy is enabled
     * @param "OverrideParamsLfsEnabled" (optional.Bool) -  Flag indication if Git LFS is enabled for that project
     * @param "OverrideParamsVisibility" (optional.String) -  The visibility of the project.
     * @param "OverrideParamsPublicBuilds" (optional.Bool) -  Deprecated: Use public_jobs instead.
     * @param "OverrideParamsPublicJobs" (optional.Bool) -  Perform public builds
     * @param "OverrideParamsRequestAccessEnabled" (optional.Bool) -  Allow users to request member access
     * @param "OverrideParamsOnlyAllowMergeIfPipelineSucceeds" (optional.Bool) -  Only allow to merge if builds succeed
     * @param "OverrideParamsAllowMergeOnSkippedPipeline" (optional.Bool) -  Allow to merge if pipeline is skipped
     * @param "OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved" (optional.Bool) -  Only allow to merge if all threads are resolved
     * @param "OverrideParamsTagList" (optional.Interface of []string) -  Deprecated: Use :topics instead
     * @param "OverrideParamsTopics" (optional.Interface of []string) -  The list of topics for a project
     * @param "OverrideParamsAvatar" (optional.Interface of *os.File) -  Avatar image for project
     * @param "OverrideParamsPrintingMergeRequestLinkEnabled" (optional.Bool) -  Show link to create/view merge request when pushing from the command line
     * @param "OverrideParamsMergeMethod" (optional.String) -  The merge method used when merging merge requests
     * @param "OverrideParamsSuggestionCommitMessage" (optional.String) -  The commit message used to apply merge request suggestions
     * @param "OverrideParamsMergeCommitTemplate" (optional.String) -  Template used to create merge commit message
     * @param "OverrideParamsSquashCommitTemplate" (optional.String) -  Template used to create squash commit message
     * @param "OverrideParamsIssueBranchTemplate" (optional.String) -  Template used to create a branch from an issue
     * @param "OverrideParamsInitializeWithReadme" (optional.Bool) -  Initialize a project with a README.md
     * @param "OverrideParamsAutoDevopsEnabled" (optional.Bool) -  Flag indication if Auto DevOps is enabled
     * @param "OverrideParamsAutoDevopsDeployStrategy" (optional.String) -  Auto Deploy strategy
     * @param "OverrideParamsAutocloseReferencedIssues" (optional.Bool) -  Flag indication if referenced issues auto-closing is enabled
     * @param "OverrideParamsRepositoryStorage" (optional.String) -  Which storage shard the repository is on. Available only to admins
     * @param "OverrideParamsPackagesEnabled" (optional.Bool) -  Enable project packages feature
     * @param "OverrideParamsSquashOption" (optional.String) -  Squash default for project. One of &#x60;never&#x60;, &#x60;always&#x60;, &#x60;default_on&#x60;, or &#x60;default_off&#x60;.
     * @param "OverrideParamsMrDefaultTargetSelf" (optional.Bool) -  Merge requests of this forked project targets itself by default
     * @param "OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed" (optional.Bool) -  Blocks merge requests from merging unless all status checks have passed
     * @param "OverrideParamsApprovalsBeforeMerge" (optional.Int32) -  How many approvers should approve merge request by default
     * @param "OverrideParamsMirror" (optional.Bool) -  Enables pull mirroring in a project
     * @param "OverrideParamsMirrorTriggerBuilds" (optional.Bool) -  Pull mirroring triggers builds
     * @param "OverrideParamsExternalAuthorizationClassificationLabel" (optional.String) -  The classification label for the project
     * @param "OverrideParamsRequirementsAccessLevel" (optional.String) -  Requirements feature access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsPreventMergeWithoutJiraIssue" (optional.Bool) -  Require an associated issue from Jira

@return ApiEntitiesProjectImportStatus
*/

type ProjectImportApiPostApiV4ProjectsRemoteImportOpts struct {
	Name                                                           optional.String
	Namespace                                                      optional.String
	Overwrite                                                      optional.Bool
	OverrideParamsDescription                                      optional.String
	OverrideParamsBuildGitStrategy                                 optional.String
	OverrideParamsBuildTimeout                                     optional.Int32
	OverrideParamsAutoCancelPendingPipelines                       optional.String
	OverrideParamsCiConfigPath                                     optional.String
	OverrideParamsServiceDeskEnabled                               optional.Bool
	OverrideParamsIssuesEnabled                                    optional.Bool
	OverrideParamsMergeRequestsEnabled                             optional.Bool
	OverrideParamsWikiEnabled                                      optional.Bool
	OverrideParamsJobsEnabled                                      optional.Bool
	OverrideParamsSnippetsEnabled                                  optional.Bool
	OverrideParamsIssuesAccessLevel                                optional.String
	OverrideParamsRepositoryAccessLevel                            optional.String
	OverrideParamsMergeRequestsAccessLevel                         optional.String
	OverrideParamsForkingAccessLevel                               optional.String
	OverrideParamsWikiAccessLevel                                  optional.String
	OverrideParamsBuildsAccessLevel                                optional.String
	OverrideParamsSnippetsAccessLevel                              optional.String
	OverrideParamsPagesAccessLevel                                 optional.String
	OverrideParamsAnalyticsAccessLevel                             optional.String
	OverrideParamsContainerRegistryAccessLevel                     optional.String
	OverrideParamsSecurityAndComplianceAccessLevel                 optional.String
	OverrideParamsReleasesAccessLevel                              optional.String
	OverrideParamsEnvironmentsAccessLevel                          optional.String
	OverrideParamsFeatureFlagsAccessLevel                          optional.String
	OverrideParamsInfrastructureAccessLevel                        optional.String
	OverrideParamsMonitorAccessLevel                               optional.String
	OverrideParamsModelExperimentsAccessLevel                      optional.String
	OverrideParamsModelRegistryAccessLevel                         optional.String
	OverrideParamsEmailsDisabled                                   optional.Bool
	OverrideParamsEmailsEnabled                                    optional.Bool
	OverrideParamsShowDefaultAwardEmojis                           optional.Bool
	OverrideParamsShowDiffPreviewInEmail                           optional.Bool
	OverrideParamsWarnAboutPotentiallyUnwantedCharacters           optional.Bool
	OverrideParamsEnforceAuthChecksOnUploads                       optional.Bool
	OverrideParamsSharedRunnersEnabled                             optional.Bool
	OverrideParamsGroupRunnersEnabled                              optional.Bool
	OverrideParamsResolveOutdatedDiffDiscussions                   optional.Bool
	OverrideParamsRemoveSourceBranchAfterMerge                     optional.Bool
	OverrideParamsContainerRegistryEnabled                         optional.Bool
	OverrideParamsContainerExpirationPolicyAttributesCadence       optional.String
	OverrideParamsContainerExpirationPolicyAttributesKeepN         optional.Int32
	OverrideParamsContainerExpirationPolicyAttributesOlderThan     optional.String
	OverrideParamsContainerExpirationPolicyAttributesNameRegex     optional.String
	OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep optional.String
	OverrideParamsContainerExpirationPolicyAttributesEnabled       optional.Bool
	OverrideParamsLfsEnabled                                       optional.Bool
	OverrideParamsVisibility                                       optional.String
	OverrideParamsPublicBuilds                                     optional.Bool
	OverrideParamsPublicJobs                                       optional.Bool
	OverrideParamsRequestAccessEnabled                             optional.Bool
	OverrideParamsOnlyAllowMergeIfPipelineSucceeds                 optional.Bool
	OverrideParamsAllowMergeOnSkippedPipeline                      optional.Bool
	OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved        optional.Bool
	OverrideParamsTagList                                          optional.Interface
	OverrideParamsTopics                                           optional.Interface
	OverrideParamsAvatar                                           optional.Interface
	OverrideParamsPrintingMergeRequestLinkEnabled                  optional.Bool
	OverrideParamsMergeMethod                                      optional.String
	OverrideParamsSuggestionCommitMessage                          optional.String
	OverrideParamsMergeCommitTemplate                              optional.String
	OverrideParamsSquashCommitTemplate                             optional.String
	OverrideParamsIssueBranchTemplate                              optional.String
	OverrideParamsInitializeWithReadme                             optional.Bool
	OverrideParamsAutoDevopsEnabled                                optional.Bool
	OverrideParamsAutoDevopsDeployStrategy                         optional.String
	OverrideParamsAutocloseReferencedIssues                        optional.Bool
	OverrideParamsRepositoryStorage                                optional.String
	OverrideParamsPackagesEnabled                                  optional.Bool
	OverrideParamsSquashOption                                     optional.String
	OverrideParamsMrDefaultTargetSelf                              optional.Bool
	OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed            optional.Bool
	OverrideParamsApprovalsBeforeMerge                             optional.Int32
	OverrideParamsMirror                                           optional.Bool
	OverrideParamsMirrorTriggerBuilds                              optional.Bool
	OverrideParamsExternalAuthorizationClassificationLabel         optional.String
	OverrideParamsRequirementsAccessLevel                          optional.String
	OverrideParamsPreventMergeWithoutJiraIssue                     optional.Bool
}

func (a *ProjectImportApiService) PostApiV4ProjectsRemoteImport(ctx context.Context, URL string, path string, localVarOptionals *ProjectImportApiPostApiV4ProjectsRemoteImportOpts) (ApiEntitiesProjectImportStatus, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ApiEntitiesProjectImportStatus
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/remote-import"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("url", parameterToString(URL, ""))
	localVarFormParams.Add("path", parameterToString(path, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarFormParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Overwrite.IsSet() {
		localVarFormParams.Add("overwrite", parameterToString(localVarOptionals.Overwrite.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsDescription.IsSet() {
		localVarFormParams.Add("override_params[description]", parameterToString(localVarOptionals.OverrideParamsDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildGitStrategy.IsSet() {
		localVarFormParams.Add("override_params[build_git_strategy]", parameterToString(localVarOptionals.OverrideParamsBuildGitStrategy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildTimeout.IsSet() {
		localVarFormParams.Add("override_params[build_timeout]", parameterToString(localVarOptionals.OverrideParamsBuildTimeout.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoCancelPendingPipelines.IsSet() {
		localVarFormParams.Add("override_params[auto_cancel_pending_pipelines]", parameterToString(localVarOptionals.OverrideParamsAutoCancelPendingPipelines.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsCiConfigPath.IsSet() {
		localVarFormParams.Add("override_params[ci_config_path]", parameterToString(localVarOptionals.OverrideParamsCiConfigPath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsServiceDeskEnabled.IsSet() {
		localVarFormParams.Add("override_params[service_desk_enabled]", parameterToString(localVarOptionals.OverrideParamsServiceDeskEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssuesEnabled.IsSet() {
		localVarFormParams.Add("override_params[issues_enabled]", parameterToString(localVarOptionals.OverrideParamsIssuesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeRequestsEnabled.IsSet() {
		localVarFormParams.Add("override_params[merge_requests_enabled]", parameterToString(localVarOptionals.OverrideParamsMergeRequestsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWikiEnabled.IsSet() {
		localVarFormParams.Add("override_params[wiki_enabled]", parameterToString(localVarOptionals.OverrideParamsWikiEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsJobsEnabled.IsSet() {
		localVarFormParams.Add("override_params[jobs_enabled]", parameterToString(localVarOptionals.OverrideParamsJobsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSnippetsEnabled.IsSet() {
		localVarFormParams.Add("override_params[snippets_enabled]", parameterToString(localVarOptionals.OverrideParamsSnippetsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssuesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[issues_access_level]", parameterToString(localVarOptionals.OverrideParamsIssuesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRepositoryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[repository_access_level]", parameterToString(localVarOptionals.OverrideParamsRepositoryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeRequestsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[merge_requests_access_level]", parameterToString(localVarOptionals.OverrideParamsMergeRequestsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsForkingAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[forking_access_level]", parameterToString(localVarOptionals.OverrideParamsForkingAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWikiAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[wiki_access_level]", parameterToString(localVarOptionals.OverrideParamsWikiAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[builds_access_level]", parameterToString(localVarOptionals.OverrideParamsBuildsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSnippetsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[snippets_access_level]", parameterToString(localVarOptionals.OverrideParamsSnippetsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPagesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[pages_access_level]", parameterToString(localVarOptionals.OverrideParamsPagesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAnalyticsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[analytics_access_level]", parameterToString(localVarOptionals.OverrideParamsAnalyticsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerRegistryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[container_registry_access_level]", parameterToString(localVarOptionals.OverrideParamsContainerRegistryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSecurityAndComplianceAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[security_and_compliance_access_level]", parameterToString(localVarOptionals.OverrideParamsSecurityAndComplianceAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsReleasesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[releases_access_level]", parameterToString(localVarOptionals.OverrideParamsReleasesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEnvironmentsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[environments_access_level]", parameterToString(localVarOptionals.OverrideParamsEnvironmentsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsFeatureFlagsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[feature_flags_access_level]", parameterToString(localVarOptionals.OverrideParamsFeatureFlagsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsInfrastructureAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[infrastructure_access_level]", parameterToString(localVarOptionals.OverrideParamsInfrastructureAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMonitorAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[monitor_access_level]", parameterToString(localVarOptionals.OverrideParamsMonitorAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsModelExperimentsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[model_experiments_access_level]", parameterToString(localVarOptionals.OverrideParamsModelExperimentsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsModelRegistryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[model_registry_access_level]", parameterToString(localVarOptionals.OverrideParamsModelRegistryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEmailsDisabled.IsSet() {
		localVarFormParams.Add("override_params[emails_disabled]", parameterToString(localVarOptionals.OverrideParamsEmailsDisabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEmailsEnabled.IsSet() {
		localVarFormParams.Add("override_params[emails_enabled]", parameterToString(localVarOptionals.OverrideParamsEmailsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsShowDefaultAwardEmojis.IsSet() {
		localVarFormParams.Add("override_params[show_default_award_emojis]", parameterToString(localVarOptionals.OverrideParamsShowDefaultAwardEmojis.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsShowDiffPreviewInEmail.IsSet() {
		localVarFormParams.Add("override_params[show_diff_preview_in_email]", parameterToString(localVarOptionals.OverrideParamsShowDiffPreviewInEmail.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWarnAboutPotentiallyUnwantedCharacters.IsSet() {
		localVarFormParams.Add("override_params[warn_about_potentially_unwanted_characters]", parameterToString(localVarOptionals.OverrideParamsWarnAboutPotentiallyUnwantedCharacters.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEnforceAuthChecksOnUploads.IsSet() {
		localVarFormParams.Add("override_params[enforce_auth_checks_on_uploads]", parameterToString(localVarOptionals.OverrideParamsEnforceAuthChecksOnUploads.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSharedRunnersEnabled.IsSet() {
		localVarFormParams.Add("override_params[shared_runners_enabled]", parameterToString(localVarOptionals.OverrideParamsSharedRunnersEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsGroupRunnersEnabled.IsSet() {
		localVarFormParams.Add("override_params[group_runners_enabled]", parameterToString(localVarOptionals.OverrideParamsGroupRunnersEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsResolveOutdatedDiffDiscussions.IsSet() {
		localVarFormParams.Add("override_params[resolve_outdated_diff_discussions]", parameterToString(localVarOptionals.OverrideParamsResolveOutdatedDiffDiscussions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRemoveSourceBranchAfterMerge.IsSet() {
		localVarFormParams.Add("override_params[remove_source_branch_after_merge]", parameterToString(localVarOptionals.OverrideParamsRemoveSourceBranchAfterMerge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerRegistryEnabled.IsSet() {
		localVarFormParams.Add("override_params[container_registry_enabled]", parameterToString(localVarOptionals.OverrideParamsContainerRegistryEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesCadence.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][cadence]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesCadence.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesKeepN.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][keep_n]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesKeepN.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesOlderThan.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][older_than]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesOlderThan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegex.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][name_regex]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][name_regex_keep]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesEnabled.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][enabled]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsLfsEnabled.IsSet() {
		localVarFormParams.Add("override_params[lfs_enabled]", parameterToString(localVarOptionals.OverrideParamsLfsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsVisibility.IsSet() {
		localVarFormParams.Add("override_params[visibility]", parameterToString(localVarOptionals.OverrideParamsVisibility.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPublicBuilds.IsSet() {
		localVarFormParams.Add("override_params[public_builds]", parameterToString(localVarOptionals.OverrideParamsPublicBuilds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPublicJobs.IsSet() {
		localVarFormParams.Add("override_params[public_jobs]", parameterToString(localVarOptionals.OverrideParamsPublicJobs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRequestAccessEnabled.IsSet() {
		localVarFormParams.Add("override_params[request_access_enabled]", parameterToString(localVarOptionals.OverrideParamsRequestAccessEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfPipelineSucceeds.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_pipeline_succeeds]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfPipelineSucceeds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAllowMergeOnSkippedPipeline.IsSet() {
		localVarFormParams.Add("override_params[allow_merge_on_skipped_pipeline]", parameterToString(localVarOptionals.OverrideParamsAllowMergeOnSkippedPipeline.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_all_discussions_are_resolved]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsTagList.IsSet() {
		localVarFormParams.Add("override_params[tag_list]", parameterToString(localVarOptionals.OverrideParamsTagList.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsTopics.IsSet() {
		localVarFormParams.Add("override_params[topics]", parameterToString(localVarOptionals.OverrideParamsTopics.Value(), "multi"))
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAvatar.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.OverrideParamsAvatar.Value().(*os.File)
		if !localVarFileOk {
			return localVarReturnValue, nil, reportError("overrideParamsAvatar should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := io.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPrintingMergeRequestLinkEnabled.IsSet() {
		localVarFormParams.Add("override_params[printing_merge_request_link_enabled]", parameterToString(localVarOptionals.OverrideParamsPrintingMergeRequestLinkEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeMethod.IsSet() {
		localVarFormParams.Add("override_params[merge_method]", parameterToString(localVarOptionals.OverrideParamsMergeMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSuggestionCommitMessage.IsSet() {
		localVarFormParams.Add("override_params[suggestion_commit_message]", parameterToString(localVarOptionals.OverrideParamsSuggestionCommitMessage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeCommitTemplate.IsSet() {
		localVarFormParams.Add("override_params[merge_commit_template]", parameterToString(localVarOptionals.OverrideParamsMergeCommitTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSquashCommitTemplate.IsSet() {
		localVarFormParams.Add("override_params[squash_commit_template]", parameterToString(localVarOptionals.OverrideParamsSquashCommitTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssueBranchTemplate.IsSet() {
		localVarFormParams.Add("override_params[issue_branch_template]", parameterToString(localVarOptionals.OverrideParamsIssueBranchTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsInitializeWithReadme.IsSet() {
		localVarFormParams.Add("override_params[initialize_with_readme]", parameterToString(localVarOptionals.OverrideParamsInitializeWithReadme.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoDevopsEnabled.IsSet() {
		localVarFormParams.Add("override_params[auto_devops_enabled]", parameterToString(localVarOptionals.OverrideParamsAutoDevopsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoDevopsDeployStrategy.IsSet() {
		localVarFormParams.Add("override_params[auto_devops_deploy_strategy]", parameterToString(localVarOptionals.OverrideParamsAutoDevopsDeployStrategy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutocloseReferencedIssues.IsSet() {
		localVarFormParams.Add("override_params[autoclose_referenced_issues]", parameterToString(localVarOptionals.OverrideParamsAutocloseReferencedIssues.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRepositoryStorage.IsSet() {
		localVarFormParams.Add("override_params[repository_storage]", parameterToString(localVarOptionals.OverrideParamsRepositoryStorage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPackagesEnabled.IsSet() {
		localVarFormParams.Add("override_params[packages_enabled]", parameterToString(localVarOptionals.OverrideParamsPackagesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSquashOption.IsSet() {
		localVarFormParams.Add("override_params[squash_option]", parameterToString(localVarOptionals.OverrideParamsSquashOption.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMrDefaultTargetSelf.IsSet() {
		localVarFormParams.Add("override_params[mr_default_target_self]", parameterToString(localVarOptionals.OverrideParamsMrDefaultTargetSelf.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_all_status_checks_passed]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsApprovalsBeforeMerge.IsSet() {
		localVarFormParams.Add("override_params[approvals_before_merge]", parameterToString(localVarOptionals.OverrideParamsApprovalsBeforeMerge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMirror.IsSet() {
		localVarFormParams.Add("override_params[mirror]", parameterToString(localVarOptionals.OverrideParamsMirror.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMirrorTriggerBuilds.IsSet() {
		localVarFormParams.Add("override_params[mirror_trigger_builds]", parameterToString(localVarOptionals.OverrideParamsMirrorTriggerBuilds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsExternalAuthorizationClassificationLabel.IsSet() {
		localVarFormParams.Add("override_params[external_authorization_classification_label]", parameterToString(localVarOptionals.OverrideParamsExternalAuthorizationClassificationLabel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRequirementsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[requirements_access_level]", parameterToString(localVarOptionals.OverrideParamsRequirementsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPreventMergeWithoutJiraIssue.IsSet() {
		localVarFormParams.Add("override_params[prevent_merge_without_jira_issue]", parameterToString(localVarOptionals.OverrideParamsPreventMergeWithoutJiraIssue.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v ApiEntitiesProjectImportStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
ProjectImportApiService Create a new project import using a file from AWS S3
This feature was introduced in GitLab 14.9.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param region AWS region
 * @param bucketName Bucket name
 * @param fileKey File key
 * @param accessKeyId Access key id
 * @param secretAccessKey Secret access key
 * @param path The new project path and name
 * @param optional nil or *ProjectImportApiPostApiV4ProjectsRemoteImportS3Opts - Optional Parameters:
     * @param "Name" (optional.String) -  The name of the project to be imported. Defaults to the path of the project if not provided.
     * @param "Namespace" (optional.String) -  The ID or name of the namespace that the project will be imported into. Defaults to the current user&#39;s namespace.
     * @param "Overwrite" (optional.Bool) -  If there is a project in the same namespace and with the same name overwrite it
     * @param "OverrideParamsDescription" (optional.String) -  The description of the project
     * @param "OverrideParamsBuildGitStrategy" (optional.String) -  The Git strategy. Defaults to &#x60;fetch&#x60;
     * @param "OverrideParamsBuildTimeout" (optional.Int32) -  Build timeout
     * @param "OverrideParamsAutoCancelPendingPipelines" (optional.String) -  Auto-cancel pending pipelines
     * @param "OverrideParamsCiConfigPath" (optional.String) -  The path to CI config file. Defaults to &#x60;.gitlab-ci.yml&#x60;
     * @param "OverrideParamsServiceDeskEnabled" (optional.Bool) -  Disable or enable the service desk
     * @param "OverrideParamsIssuesEnabled" (optional.Bool) -  Flag indication if the issue tracker is enabled
     * @param "OverrideParamsMergeRequestsEnabled" (optional.Bool) -  Flag indication if merge requests are enabled
     * @param "OverrideParamsWikiEnabled" (optional.Bool) -  Flag indication if the wiki is enabled
     * @param "OverrideParamsJobsEnabled" (optional.Bool) -  Flag indication if jobs are enabled
     * @param "OverrideParamsSnippetsEnabled" (optional.Bool) -  Flag indication if snippets are enabled
     * @param "OverrideParamsIssuesAccessLevel" (optional.String) -  Issues access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsRepositoryAccessLevel" (optional.String) -  Repository access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsMergeRequestsAccessLevel" (optional.String) -  Merge requests access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsForkingAccessLevel" (optional.String) -  Forks access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsWikiAccessLevel" (optional.String) -  Wiki access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsBuildsAccessLevel" (optional.String) -  Builds access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsSnippetsAccessLevel" (optional.String) -  Snippets access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsPagesAccessLevel" (optional.String) -  Pages access level. One of &#x60;disabled&#x60;, &#x60;private&#x60;, &#x60;enabled&#x60; or &#x60;public&#x60;
     * @param "OverrideParamsAnalyticsAccessLevel" (optional.String) -  Analytics access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsContainerRegistryAccessLevel" (optional.String) -  Controls visibility of the container registry. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;. &#x60;private&#x60; will make the container registry accessible only to project members (reporter role and above). &#x60;enabled&#x60; will make the container registry accessible to everyone who has access to the project. &#x60;disabled&#x60; will disable the container registry
     * @param "OverrideParamsSecurityAndComplianceAccessLevel" (optional.String) -  Security and compliance access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsReleasesAccessLevel" (optional.String) -  Releases access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsEnvironmentsAccessLevel" (optional.String) -  Environments access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsFeatureFlagsAccessLevel" (optional.String) -  Feature flags access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsInfrastructureAccessLevel" (optional.String) -  Infrastructure access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsMonitorAccessLevel" (optional.String) -  Monitor access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsModelExperimentsAccessLevel" (optional.String) -  Model experiments access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsModelRegistryAccessLevel" (optional.String) -  Model registry access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsEmailsDisabled" (optional.Bool) -  Deprecated: Use emails_enabled instead.
     * @param "OverrideParamsEmailsEnabled" (optional.Bool) -  Enable email notifications
     * @param "OverrideParamsShowDefaultAwardEmojis" (optional.Bool) -  Show default award emojis
     * @param "OverrideParamsShowDiffPreviewInEmail" (optional.Bool) -  Include the code diff preview in merge request notification emails
     * @param "OverrideParamsWarnAboutPotentiallyUnwantedCharacters" (optional.Bool) -  Warn about potentially unwanted characters
     * @param "OverrideParamsEnforceAuthChecksOnUploads" (optional.Bool) -  Enforce auth check on uploads
     * @param "OverrideParamsSharedRunnersEnabled" (optional.Bool) -  Flag indication if shared runners are enabled for that project
     * @param "OverrideParamsGroupRunnersEnabled" (optional.Bool) -  Flag indication if group runners are enabled for that project
     * @param "OverrideParamsResolveOutdatedDiffDiscussions" (optional.Bool) -  Automatically resolve merge request diff threads on lines changed with a push
     * @param "OverrideParamsRemoveSourceBranchAfterMerge" (optional.Bool) -  Remove the source branch by default after merge
     * @param "OverrideParamsContainerRegistryEnabled" (optional.Bool) -  Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project
     * @param "OverrideParamsContainerExpirationPolicyAttributesCadence" (optional.String) -  Container expiration policy cadence for recurring job
     * @param "OverrideParamsContainerExpirationPolicyAttributesKeepN" (optional.Int32) -  Container expiration policy number of images to keep
     * @param "OverrideParamsContainerExpirationPolicyAttributesOlderThan" (optional.String) -  Container expiration policy remove images older than value
     * @param "OverrideParamsContainerExpirationPolicyAttributesNameRegex" (optional.String) -  Container expiration policy regex for image removal
     * @param "OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep" (optional.String) -  Container expiration policy regex for image retention
     * @param "OverrideParamsContainerExpirationPolicyAttributesEnabled" (optional.Bool) -  Flag indication if container expiration policy is enabled
     * @param "OverrideParamsLfsEnabled" (optional.Bool) -  Flag indication if Git LFS is enabled for that project
     * @param "OverrideParamsVisibility" (optional.String) -  The visibility of the project.
     * @param "OverrideParamsPublicBuilds" (optional.Bool) -  Deprecated: Use public_jobs instead.
     * @param "OverrideParamsPublicJobs" (optional.Bool) -  Perform public builds
     * @param "OverrideParamsRequestAccessEnabled" (optional.Bool) -  Allow users to request member access
     * @param "OverrideParamsOnlyAllowMergeIfPipelineSucceeds" (optional.Bool) -  Only allow to merge if builds succeed
     * @param "OverrideParamsAllowMergeOnSkippedPipeline" (optional.Bool) -  Allow to merge if pipeline is skipped
     * @param "OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved" (optional.Bool) -  Only allow to merge if all threads are resolved
     * @param "OverrideParamsTagList" (optional.Interface of []string) -  Deprecated: Use :topics instead
     * @param "OverrideParamsTopics" (optional.Interface of []string) -  The list of topics for a project
     * @param "OverrideParamsAvatar" (optional.Interface of *os.File) -  Avatar image for project
     * @param "OverrideParamsPrintingMergeRequestLinkEnabled" (optional.Bool) -  Show link to create/view merge request when pushing from the command line
     * @param "OverrideParamsMergeMethod" (optional.String) -  The merge method used when merging merge requests
     * @param "OverrideParamsSuggestionCommitMessage" (optional.String) -  The commit message used to apply merge request suggestions
     * @param "OverrideParamsMergeCommitTemplate" (optional.String) -  Template used to create merge commit message
     * @param "OverrideParamsSquashCommitTemplate" (optional.String) -  Template used to create squash commit message
     * @param "OverrideParamsIssueBranchTemplate" (optional.String) -  Template used to create a branch from an issue
     * @param "OverrideParamsInitializeWithReadme" (optional.Bool) -  Initialize a project with a README.md
     * @param "OverrideParamsAutoDevopsEnabled" (optional.Bool) -  Flag indication if Auto DevOps is enabled
     * @param "OverrideParamsAutoDevopsDeployStrategy" (optional.String) -  Auto Deploy strategy
     * @param "OverrideParamsAutocloseReferencedIssues" (optional.Bool) -  Flag indication if referenced issues auto-closing is enabled
     * @param "OverrideParamsRepositoryStorage" (optional.String) -  Which storage shard the repository is on. Available only to admins
     * @param "OverrideParamsPackagesEnabled" (optional.Bool) -  Enable project packages feature
     * @param "OverrideParamsSquashOption" (optional.String) -  Squash default for project. One of &#x60;never&#x60;, &#x60;always&#x60;, &#x60;default_on&#x60;, or &#x60;default_off&#x60;.
     * @param "OverrideParamsMrDefaultTargetSelf" (optional.Bool) -  Merge requests of this forked project targets itself by default
     * @param "OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed" (optional.Bool) -  Blocks merge requests from merging unless all status checks have passed
     * @param "OverrideParamsApprovalsBeforeMerge" (optional.Int32) -  How many approvers should approve merge request by default
     * @param "OverrideParamsMirror" (optional.Bool) -  Enables pull mirroring in a project
     * @param "OverrideParamsMirrorTriggerBuilds" (optional.Bool) -  Pull mirroring triggers builds
     * @param "OverrideParamsExternalAuthorizationClassificationLabel" (optional.String) -  The classification label for the project
     * @param "OverrideParamsRequirementsAccessLevel" (optional.String) -  Requirements feature access level. One of &#x60;disabled&#x60;, &#x60;private&#x60; or &#x60;enabled&#x60;
     * @param "OverrideParamsPreventMergeWithoutJiraIssue" (optional.Bool) -  Require an associated issue from Jira

@return ApiEntitiesProjectImportStatus
*/

type ProjectImportApiPostApiV4ProjectsRemoteImportS3Opts struct {
	Name                                                           optional.String
	Namespace                                                      optional.String
	Overwrite                                                      optional.Bool
	OverrideParamsDescription                                      optional.String
	OverrideParamsBuildGitStrategy                                 optional.String
	OverrideParamsBuildTimeout                                     optional.Int32
	OverrideParamsAutoCancelPendingPipelines                       optional.String
	OverrideParamsCiConfigPath                                     optional.String
	OverrideParamsServiceDeskEnabled                               optional.Bool
	OverrideParamsIssuesEnabled                                    optional.Bool
	OverrideParamsMergeRequestsEnabled                             optional.Bool
	OverrideParamsWikiEnabled                                      optional.Bool
	OverrideParamsJobsEnabled                                      optional.Bool
	OverrideParamsSnippetsEnabled                                  optional.Bool
	OverrideParamsIssuesAccessLevel                                optional.String
	OverrideParamsRepositoryAccessLevel                            optional.String
	OverrideParamsMergeRequestsAccessLevel                         optional.String
	OverrideParamsForkingAccessLevel                               optional.String
	OverrideParamsWikiAccessLevel                                  optional.String
	OverrideParamsBuildsAccessLevel                                optional.String
	OverrideParamsSnippetsAccessLevel                              optional.String
	OverrideParamsPagesAccessLevel                                 optional.String
	OverrideParamsAnalyticsAccessLevel                             optional.String
	OverrideParamsContainerRegistryAccessLevel                     optional.String
	OverrideParamsSecurityAndComplianceAccessLevel                 optional.String
	OverrideParamsReleasesAccessLevel                              optional.String
	OverrideParamsEnvironmentsAccessLevel                          optional.String
	OverrideParamsFeatureFlagsAccessLevel                          optional.String
	OverrideParamsInfrastructureAccessLevel                        optional.String
	OverrideParamsMonitorAccessLevel                               optional.String
	OverrideParamsModelExperimentsAccessLevel                      optional.String
	OverrideParamsModelRegistryAccessLevel                         optional.String
	OverrideParamsEmailsDisabled                                   optional.Bool
	OverrideParamsEmailsEnabled                                    optional.Bool
	OverrideParamsShowDefaultAwardEmojis                           optional.Bool
	OverrideParamsShowDiffPreviewInEmail                           optional.Bool
	OverrideParamsWarnAboutPotentiallyUnwantedCharacters           optional.Bool
	OverrideParamsEnforceAuthChecksOnUploads                       optional.Bool
	OverrideParamsSharedRunnersEnabled                             optional.Bool
	OverrideParamsGroupRunnersEnabled                              optional.Bool
	OverrideParamsResolveOutdatedDiffDiscussions                   optional.Bool
	OverrideParamsRemoveSourceBranchAfterMerge                     optional.Bool
	OverrideParamsContainerRegistryEnabled                         optional.Bool
	OverrideParamsContainerExpirationPolicyAttributesCadence       optional.String
	OverrideParamsContainerExpirationPolicyAttributesKeepN         optional.Int32
	OverrideParamsContainerExpirationPolicyAttributesOlderThan     optional.String
	OverrideParamsContainerExpirationPolicyAttributesNameRegex     optional.String
	OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep optional.String
	OverrideParamsContainerExpirationPolicyAttributesEnabled       optional.Bool
	OverrideParamsLfsEnabled                                       optional.Bool
	OverrideParamsVisibility                                       optional.String
	OverrideParamsPublicBuilds                                     optional.Bool
	OverrideParamsPublicJobs                                       optional.Bool
	OverrideParamsRequestAccessEnabled                             optional.Bool
	OverrideParamsOnlyAllowMergeIfPipelineSucceeds                 optional.Bool
	OverrideParamsAllowMergeOnSkippedPipeline                      optional.Bool
	OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved        optional.Bool
	OverrideParamsTagList                                          optional.Interface
	OverrideParamsTopics                                           optional.Interface
	OverrideParamsAvatar                                           optional.Interface
	OverrideParamsPrintingMergeRequestLinkEnabled                  optional.Bool
	OverrideParamsMergeMethod                                      optional.String
	OverrideParamsSuggestionCommitMessage                          optional.String
	OverrideParamsMergeCommitTemplate                              optional.String
	OverrideParamsSquashCommitTemplate                             optional.String
	OverrideParamsIssueBranchTemplate                              optional.String
	OverrideParamsInitializeWithReadme                             optional.Bool
	OverrideParamsAutoDevopsEnabled                                optional.Bool
	OverrideParamsAutoDevopsDeployStrategy                         optional.String
	OverrideParamsAutocloseReferencedIssues                        optional.Bool
	OverrideParamsRepositoryStorage                                optional.String
	OverrideParamsPackagesEnabled                                  optional.Bool
	OverrideParamsSquashOption                                     optional.String
	OverrideParamsMrDefaultTargetSelf                              optional.Bool
	OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed            optional.Bool
	OverrideParamsApprovalsBeforeMerge                             optional.Int32
	OverrideParamsMirror                                           optional.Bool
	OverrideParamsMirrorTriggerBuilds                              optional.Bool
	OverrideParamsExternalAuthorizationClassificationLabel         optional.String
	OverrideParamsRequirementsAccessLevel                          optional.String
	OverrideParamsPreventMergeWithoutJiraIssue                     optional.Bool
}

func (a *ProjectImportApiService) PostApiV4ProjectsRemoteImportS3(ctx context.Context, region string, bucketName string, fileKey string, accessKeyId string, secretAccessKey string, path string, localVarOptionals *ProjectImportApiPostApiV4ProjectsRemoteImportS3Opts) (ApiEntitiesProjectImportStatus, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ApiEntitiesProjectImportStatus
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/remote-import-s3"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	localVarFormParams.Add("region", parameterToString(region, ""))
	localVarFormParams.Add("bucket_name", parameterToString(bucketName, ""))
	localVarFormParams.Add("file_key", parameterToString(fileKey, ""))
	localVarFormParams.Add("access_key_id", parameterToString(accessKeyId, ""))
	localVarFormParams.Add("secret_access_key", parameterToString(secretAccessKey, ""))
	localVarFormParams.Add("path", parameterToString(path, ""))
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarFormParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Namespace.IsSet() {
		localVarFormParams.Add("namespace", parameterToString(localVarOptionals.Namespace.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Overwrite.IsSet() {
		localVarFormParams.Add("overwrite", parameterToString(localVarOptionals.Overwrite.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsDescription.IsSet() {
		localVarFormParams.Add("override_params[description]", parameterToString(localVarOptionals.OverrideParamsDescription.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildGitStrategy.IsSet() {
		localVarFormParams.Add("override_params[build_git_strategy]", parameterToString(localVarOptionals.OverrideParamsBuildGitStrategy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildTimeout.IsSet() {
		localVarFormParams.Add("override_params[build_timeout]", parameterToString(localVarOptionals.OverrideParamsBuildTimeout.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoCancelPendingPipelines.IsSet() {
		localVarFormParams.Add("override_params[auto_cancel_pending_pipelines]", parameterToString(localVarOptionals.OverrideParamsAutoCancelPendingPipelines.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsCiConfigPath.IsSet() {
		localVarFormParams.Add("override_params[ci_config_path]", parameterToString(localVarOptionals.OverrideParamsCiConfigPath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsServiceDeskEnabled.IsSet() {
		localVarFormParams.Add("override_params[service_desk_enabled]", parameterToString(localVarOptionals.OverrideParamsServiceDeskEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssuesEnabled.IsSet() {
		localVarFormParams.Add("override_params[issues_enabled]", parameterToString(localVarOptionals.OverrideParamsIssuesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeRequestsEnabled.IsSet() {
		localVarFormParams.Add("override_params[merge_requests_enabled]", parameterToString(localVarOptionals.OverrideParamsMergeRequestsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWikiEnabled.IsSet() {
		localVarFormParams.Add("override_params[wiki_enabled]", parameterToString(localVarOptionals.OverrideParamsWikiEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsJobsEnabled.IsSet() {
		localVarFormParams.Add("override_params[jobs_enabled]", parameterToString(localVarOptionals.OverrideParamsJobsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSnippetsEnabled.IsSet() {
		localVarFormParams.Add("override_params[snippets_enabled]", parameterToString(localVarOptionals.OverrideParamsSnippetsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssuesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[issues_access_level]", parameterToString(localVarOptionals.OverrideParamsIssuesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRepositoryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[repository_access_level]", parameterToString(localVarOptionals.OverrideParamsRepositoryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeRequestsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[merge_requests_access_level]", parameterToString(localVarOptionals.OverrideParamsMergeRequestsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsForkingAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[forking_access_level]", parameterToString(localVarOptionals.OverrideParamsForkingAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWikiAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[wiki_access_level]", parameterToString(localVarOptionals.OverrideParamsWikiAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsBuildsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[builds_access_level]", parameterToString(localVarOptionals.OverrideParamsBuildsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSnippetsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[snippets_access_level]", parameterToString(localVarOptionals.OverrideParamsSnippetsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPagesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[pages_access_level]", parameterToString(localVarOptionals.OverrideParamsPagesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAnalyticsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[analytics_access_level]", parameterToString(localVarOptionals.OverrideParamsAnalyticsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerRegistryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[container_registry_access_level]", parameterToString(localVarOptionals.OverrideParamsContainerRegistryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSecurityAndComplianceAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[security_and_compliance_access_level]", parameterToString(localVarOptionals.OverrideParamsSecurityAndComplianceAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsReleasesAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[releases_access_level]", parameterToString(localVarOptionals.OverrideParamsReleasesAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEnvironmentsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[environments_access_level]", parameterToString(localVarOptionals.OverrideParamsEnvironmentsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsFeatureFlagsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[feature_flags_access_level]", parameterToString(localVarOptionals.OverrideParamsFeatureFlagsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsInfrastructureAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[infrastructure_access_level]", parameterToString(localVarOptionals.OverrideParamsInfrastructureAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMonitorAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[monitor_access_level]", parameterToString(localVarOptionals.OverrideParamsMonitorAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsModelExperimentsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[model_experiments_access_level]", parameterToString(localVarOptionals.OverrideParamsModelExperimentsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsModelRegistryAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[model_registry_access_level]", parameterToString(localVarOptionals.OverrideParamsModelRegistryAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEmailsDisabled.IsSet() {
		localVarFormParams.Add("override_params[emails_disabled]", parameterToString(localVarOptionals.OverrideParamsEmailsDisabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEmailsEnabled.IsSet() {
		localVarFormParams.Add("override_params[emails_enabled]", parameterToString(localVarOptionals.OverrideParamsEmailsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsShowDefaultAwardEmojis.IsSet() {
		localVarFormParams.Add("override_params[show_default_award_emojis]", parameterToString(localVarOptionals.OverrideParamsShowDefaultAwardEmojis.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsShowDiffPreviewInEmail.IsSet() {
		localVarFormParams.Add("override_params[show_diff_preview_in_email]", parameterToString(localVarOptionals.OverrideParamsShowDiffPreviewInEmail.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsWarnAboutPotentiallyUnwantedCharacters.IsSet() {
		localVarFormParams.Add("override_params[warn_about_potentially_unwanted_characters]", parameterToString(localVarOptionals.OverrideParamsWarnAboutPotentiallyUnwantedCharacters.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsEnforceAuthChecksOnUploads.IsSet() {
		localVarFormParams.Add("override_params[enforce_auth_checks_on_uploads]", parameterToString(localVarOptionals.OverrideParamsEnforceAuthChecksOnUploads.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSharedRunnersEnabled.IsSet() {
		localVarFormParams.Add("override_params[shared_runners_enabled]", parameterToString(localVarOptionals.OverrideParamsSharedRunnersEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsGroupRunnersEnabled.IsSet() {
		localVarFormParams.Add("override_params[group_runners_enabled]", parameterToString(localVarOptionals.OverrideParamsGroupRunnersEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsResolveOutdatedDiffDiscussions.IsSet() {
		localVarFormParams.Add("override_params[resolve_outdated_diff_discussions]", parameterToString(localVarOptionals.OverrideParamsResolveOutdatedDiffDiscussions.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRemoveSourceBranchAfterMerge.IsSet() {
		localVarFormParams.Add("override_params[remove_source_branch_after_merge]", parameterToString(localVarOptionals.OverrideParamsRemoveSourceBranchAfterMerge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerRegistryEnabled.IsSet() {
		localVarFormParams.Add("override_params[container_registry_enabled]", parameterToString(localVarOptionals.OverrideParamsContainerRegistryEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesCadence.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][cadence]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesCadence.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesKeepN.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][keep_n]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesKeepN.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesOlderThan.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][older_than]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesOlderThan.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegex.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][name_regex]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegex.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][name_regex_keep]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesNameRegexKeep.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesEnabled.IsSet() {
		localVarFormParams.Add("override_params[container_expiration_policy_attributes][enabled]", parameterToString(localVarOptionals.OverrideParamsContainerExpirationPolicyAttributesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsLfsEnabled.IsSet() {
		localVarFormParams.Add("override_params[lfs_enabled]", parameterToString(localVarOptionals.OverrideParamsLfsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsVisibility.IsSet() {
		localVarFormParams.Add("override_params[visibility]", parameterToString(localVarOptionals.OverrideParamsVisibility.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPublicBuilds.IsSet() {
		localVarFormParams.Add("override_params[public_builds]", parameterToString(localVarOptionals.OverrideParamsPublicBuilds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPublicJobs.IsSet() {
		localVarFormParams.Add("override_params[public_jobs]", parameterToString(localVarOptionals.OverrideParamsPublicJobs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRequestAccessEnabled.IsSet() {
		localVarFormParams.Add("override_params[request_access_enabled]", parameterToString(localVarOptionals.OverrideParamsRequestAccessEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfPipelineSucceeds.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_pipeline_succeeds]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfPipelineSucceeds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAllowMergeOnSkippedPipeline.IsSet() {
		localVarFormParams.Add("override_params[allow_merge_on_skipped_pipeline]", parameterToString(localVarOptionals.OverrideParamsAllowMergeOnSkippedPipeline.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_all_discussions_are_resolved]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfAllDiscussionsAreResolved.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsTagList.IsSet() {
		localVarFormParams.Add("override_params[tag_list]", parameterToString(localVarOptionals.OverrideParamsTagList.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsTopics.IsSet() {
		localVarFormParams.Add("override_params[topics]", parameterToString(localVarOptionals.OverrideParamsTopics.Value(), "multi"))
	}
	var localVarFile *os.File
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAvatar.IsSet() {
		localVarFileOk := false
		localVarFile, localVarFileOk = localVarOptionals.OverrideParamsAvatar.Value().(*os.File)
		if !localVarFileOk {
			return localVarReturnValue, nil, reportError("overrideParamsAvatar should be *os.File")
		}
	}
	if localVarFile != nil {
		fbs, _ := io.ReadAll(localVarFile)
		localVarFileBytes = fbs
		localVarFileName = localVarFile.Name()
		localVarFile.Close()
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPrintingMergeRequestLinkEnabled.IsSet() {
		localVarFormParams.Add("override_params[printing_merge_request_link_enabled]", parameterToString(localVarOptionals.OverrideParamsPrintingMergeRequestLinkEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeMethod.IsSet() {
		localVarFormParams.Add("override_params[merge_method]", parameterToString(localVarOptionals.OverrideParamsMergeMethod.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSuggestionCommitMessage.IsSet() {
		localVarFormParams.Add("override_params[suggestion_commit_message]", parameterToString(localVarOptionals.OverrideParamsSuggestionCommitMessage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMergeCommitTemplate.IsSet() {
		localVarFormParams.Add("override_params[merge_commit_template]", parameterToString(localVarOptionals.OverrideParamsMergeCommitTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSquashCommitTemplate.IsSet() {
		localVarFormParams.Add("override_params[squash_commit_template]", parameterToString(localVarOptionals.OverrideParamsSquashCommitTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsIssueBranchTemplate.IsSet() {
		localVarFormParams.Add("override_params[issue_branch_template]", parameterToString(localVarOptionals.OverrideParamsIssueBranchTemplate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsInitializeWithReadme.IsSet() {
		localVarFormParams.Add("override_params[initialize_with_readme]", parameterToString(localVarOptionals.OverrideParamsInitializeWithReadme.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoDevopsEnabled.IsSet() {
		localVarFormParams.Add("override_params[auto_devops_enabled]", parameterToString(localVarOptionals.OverrideParamsAutoDevopsEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutoDevopsDeployStrategy.IsSet() {
		localVarFormParams.Add("override_params[auto_devops_deploy_strategy]", parameterToString(localVarOptionals.OverrideParamsAutoDevopsDeployStrategy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsAutocloseReferencedIssues.IsSet() {
		localVarFormParams.Add("override_params[autoclose_referenced_issues]", parameterToString(localVarOptionals.OverrideParamsAutocloseReferencedIssues.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRepositoryStorage.IsSet() {
		localVarFormParams.Add("override_params[repository_storage]", parameterToString(localVarOptionals.OverrideParamsRepositoryStorage.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPackagesEnabled.IsSet() {
		localVarFormParams.Add("override_params[packages_enabled]", parameterToString(localVarOptionals.OverrideParamsPackagesEnabled.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsSquashOption.IsSet() {
		localVarFormParams.Add("override_params[squash_option]", parameterToString(localVarOptionals.OverrideParamsSquashOption.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMrDefaultTargetSelf.IsSet() {
		localVarFormParams.Add("override_params[mr_default_target_self]", parameterToString(localVarOptionals.OverrideParamsMrDefaultTargetSelf.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed.IsSet() {
		localVarFormParams.Add("override_params[only_allow_merge_if_all_status_checks_passed]", parameterToString(localVarOptionals.OverrideParamsOnlyAllowMergeIfAllStatusChecksPassed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsApprovalsBeforeMerge.IsSet() {
		localVarFormParams.Add("override_params[approvals_before_merge]", parameterToString(localVarOptionals.OverrideParamsApprovalsBeforeMerge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMirror.IsSet() {
		localVarFormParams.Add("override_params[mirror]", parameterToString(localVarOptionals.OverrideParamsMirror.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsMirrorTriggerBuilds.IsSet() {
		localVarFormParams.Add("override_params[mirror_trigger_builds]", parameterToString(localVarOptionals.OverrideParamsMirrorTriggerBuilds.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsExternalAuthorizationClassificationLabel.IsSet() {
		localVarFormParams.Add("override_params[external_authorization_classification_label]", parameterToString(localVarOptionals.OverrideParamsExternalAuthorizationClassificationLabel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsRequirementsAccessLevel.IsSet() {
		localVarFormParams.Add("override_params[requirements_access_level]", parameterToString(localVarOptionals.OverrideParamsRequirementsAccessLevel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.OverrideParamsPreventMergeWithoutJiraIssue.IsSet() {
		localVarFormParams.Add("override_params[prevent_merge_without_jira_issue]", parameterToString(localVarOptionals.OverrideParamsPreventMergeWithoutJiraIssue.Value(), ""))
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 201 {
			var v ApiEntitiesProjectImportStatus
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
