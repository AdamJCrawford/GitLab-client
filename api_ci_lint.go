/*
 * GitLab API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: v4
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type CiLintApiService service

/*
CiLintApiService Validates a CI YAML configuration with a namespace
Checks if a project’s .gitlab-ci.yml configuration in a given commit (by default HEAD of the         project’s default branch) is valid
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *CiLintApiGetApiV4ProjectsIdCiLintOpts - Optional Parameters:
     * @param "Sha" (optional.String) -  Deprecated: Use content_ref instead
     * @param "ContentRef" (optional.String) -  The CI/CD configuration content is taken from this commit SHA, branch or tag. Defaults to the HEAD of the project&#39;s default branch
     * @param "DryRun" (optional.Bool) -  Run pipeline creation simulation, or only do static check. This is false by default
     * @param "IncludeJobs" (optional.Bool) -  If the list of jobs that would exist in a static check or pipeline         simulation should be included in the response. This is false by default
     * @param "Ref" (optional.String) -  Deprecated: Use dry_run_ref instead
     * @param "DryRunRef" (optional.String) -  Branch or tag used as context when executing a dry run. Defaults to the default branch of the project. Only used when dry_run is true

@return ApiEntitiesCiLintResult
*/

type CiLintApiGetApiV4ProjectsIdCiLintOpts struct {
	Sha         optional.String
	ContentRef  optional.String
	DryRun      optional.Bool
	IncludeJobs optional.Bool
	Ref         optional.String
	DryRunRef   optional.String
}

func (a *CiLintApiService) GetApiV4ProjectsIdCiLint(ctx context.Context, id int32, localVarOptionals *CiLintApiGetApiV4ProjectsIdCiLintOpts) (ApiEntitiesCiLintResult, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Get")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ApiEntitiesCiLintResult
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/{id}/ci/lint"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.Sha.IsSet() {
		localVarQueryParams.Add("sha", parameterToString(localVarOptionals.Sha.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ContentRef.IsSet() {
		localVarQueryParams.Add("content_ref", parameterToString(localVarOptionals.ContentRef.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DryRun.IsSet() {
		localVarQueryParams.Add("dry_run", parameterToString(localVarOptionals.DryRun.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeJobs.IsSet() {
		localVarQueryParams.Add("include_jobs", parameterToString(localVarOptionals.IncludeJobs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ref.IsSet() {
		localVarQueryParams.Add("ref", parameterToString(localVarOptionals.Ref.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DryRunRef.IsSet() {
		localVarQueryParams.Add("dry_run_ref", parameterToString(localVarOptionals.DryRunRef.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ApiEntitiesCiLintResult
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
CiLintApiService Validate a CI YAML configuration with a namespace
Checks if CI/CD YAML configuration is valid. This endpoint has namespace specific context
  - @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
  - @param id
  - @param postApiV4ProjectsIdCiLint

@return ApiEntitiesCiLintResult
*/
func (a *CiLintApiService) PostApiV4ProjectsIdCiLint(ctx context.Context, id int32, postApiV4ProjectsIdCiLint PostApiV4ProjectsIdCiLint) (ApiEntitiesCiLintResult, *http.Response, error) {
	var (
		localVarHttpMethod  = strings.ToUpper("Post")
		localVarPostBody    interface{}
		localVarFileName    string
		localVarFileBytes   []byte
		localVarReturnValue ApiEntitiesCiLintResult
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v4/projects/{id}/ci/lint"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &postApiV4ProjectsIdCiLint
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body:  localVarBody,
			error: localVarHttpResponse.Status,
		}

		if localVarHttpResponse.StatusCode == 200 {
			var v ApiEntitiesCiLintResult
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHttpResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHttpResponse, newErr
		}

		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
